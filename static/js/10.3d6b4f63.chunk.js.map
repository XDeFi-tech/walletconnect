{"version":3,"sources":["../../src/utils.ts","../../src/phantomAdapter.ts"],"names":["poll","callback","interval","count","setTimeout","done","resolve","res","err","reject","detectProvider","options","window","constructor","WALLET_ADAPTERS","PHANTOM","ADAPTER_NAMESPACES","SOLANA","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","ADAPTER_EVENTS","isWalletConnected","isConnected","_wallet","provider","phantomProvider","setAdapterSettings","init","getChainConfig","WalletInitializationError","config","chainConfig","log","connect","adapter","handleDisconnect","args","reason","error","WalletLoginError","disconnect","cleanup","getUserInfo","connectWithProvider","reconnected","rehydrated"],"mappings":"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","file":"static/js/10.3d6b4f63.chunk.js","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, ADAPTER_EVENTS, getChainConfig, WalletInitializationError, log, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport { PhantomInjectedProvider } from '@web3auth/solana-provider';\n\nfunction poll(callback, interval, count) {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done) poll(callback, interval, count - 1).then(res => {\n          resolve(res);\n          return res;\n        }).catch(err => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\nconst detectProvider = async function () {\n  var _window$solana;\n\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    interval: 1000,\n    count: 3\n  };\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!((_window$solana = window.solana) !== null && _window$solana !== void 0 && _window$solana.isPhantom);\n\n  if (isPhantomAvailable) {\n    return window.solana;\n  }\n\n  const isAvailable = await poll(() => {\n    var _window$solana2;\n\n    return (_window$solana2 = window.solana) === null || _window$solana2 === void 0 ? void 0 : _window$solana2.isPhantom;\n  }, options.interval, options.count);\n  if (isAvailable) return window.solana;\n  return null;\n};\n\nclass PhantomAdapter extends BaseAdapter {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.PHANTOM);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"_wallet\", null);\n\n    _defineProperty(this, \"phantomProvider\", null);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    _defineProperty(this, \"_onDisconnect\", () => {\n      if (this._wallet) {\n        this._wallet.off(\"disconnect\", this._onDisconnect);\n\n        this.rehydrated = false; // ready to be connected again only if it was previously connected and not cleaned up\n\n        this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n        this.emit(ADAPTER_EVENTS.DISCONNECTED);\n      }\n    });\n\n    this.chainConfig = options.chainConfig || null;\n  }\n\n  get isWalletConnected() {\n    var _this$_wallet;\n\n    return !!((_this$_wallet = this._wallet) !== null && _this$_wallet !== void 0 && _this$_wallet.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider() {\n    var _this$phantomProvider;\n\n    return ((_this$phantomProvider = this.phantomProvider) === null || _this$phantomProvider === void 0 ? void 0 : _this$phantomProvider.provider) || null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  setAdapterSettings(_) {}\n\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n    }\n\n    this._wallet = await detectProvider({\n      interval: 500,\n      count: 3\n    });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      log.debug(\"initializing phantom adapter\");\n\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect() {\n    var _this = this;\n\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, {\n        adapter: WALLET_ADAPTERS.PHANTOM\n      });\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n\n        try {\n          await new Promise((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet);\n              resolve(this.provider);\n            };\n\n            if (!this._wallet) return reject(WalletInitializationError.notInstalled());\n\n            this._wallet.once(\"connect\", connect); // Raise an issue on phantom that if window is closed, disconnect event is not fired\n\n\n            this._wallet._handleDisconnect = function () {\n              reject(WalletInitializationError.windowClosed());\n\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n\n              return handleDisconnect.apply(_this._wallet, args);\n            };\n\n            this._wallet.connect().catch(reason => {\n              reject(reason);\n            });\n          });\n        } catch (error) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError(error === null || error === void 0 ? void 0 : error.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n    try {\n      var _this$_wallet2;\n\n      await ((_this$_wallet2 = this._wallet) === null || _this$_wallet2 === void 0 ? void 0 : _this$_wallet2.disconnect());\n\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError(error === null || error === void 0 ? void 0 : error.message));\n    }\n  }\n\n  async getUserInfo() {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async connectWithProvider(injectedProvider) {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, {\n      adapter: WALLET_ADAPTERS.PHANTOM,\n      reconnected: this.rehydrated\n    });\n    return this.provider;\n  }\n\n}\n\nexport { PhantomAdapter };\n//# sourceMappingURL=phantomAdapter.esm.js.map\n",null],"sourceRoot":""}