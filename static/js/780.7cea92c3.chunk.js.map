{"version":3,"file":"static/js/780.7cea92c3.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/openlogin-adapter/src/config.ts","../node_modules/@web3auth/openlogin-adapter/src/openloginAdapter.ts"],"sourcesContent":["import { OPENLOGIN_NETWORK, UX_MODE } from \"@toruslabs/openlogin\";\nimport { ChainNamespaceType, getChainConfig } from \"@web3auth/base\";\n\nimport { OpenloginAdapterOptions } from \"./interface\";\n\nexport const getOpenloginDefaultOptions = (chainNamespace?: ChainNamespaceType, chainId?: number | string): OpenloginAdapterOptions => {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP,\n    },\n    chainConfig: chainNamespace ? getChainConfig(chainNamespace, chainId) : null,\n    loginSettings: {},\n  };\n};\n","import OpenLogin, { getHashQueryParams, LoginParams, OPENLOGIN_NETWORK, OpenLoginOptions, SUPPORTED_KEY_CURVES, UX_MODE } from \"@toruslabs/openlogin\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { CommonPrivateKeyProvider, IBaseProvider } from \"@web3auth/base-provider\";\nimport merge from \"lodash.merge\";\n\nimport { getOpenloginDefaultOptions } from \"./config\";\nimport type { LoginSettings, OpenloginAdapterOptions } from \"./interface\";\n\nexport type OpenloginLoginParams = LoginParams & {\n  // to maintain backward compatibility\n  login_hint?: string;\n};\n\ntype PrivateKeyProvider = IBaseProvider<string>;\n\nexport class OpenloginAdapter extends BaseAdapter<OpenloginLoginParams> {\n  readonly name: string = WALLET_ADAPTERS.OPENLOGIN;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.MULTICHAIN;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.IN_APP;\n\n  public openloginInstance: OpenLogin | null = null;\n\n  public clientId: string;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  private openloginOptions: OpenLoginOptions;\n\n  private loginSettings: LoginSettings = {};\n\n  private privKeyProvider: PrivateKeyProvider | null = null;\n\n  constructor(params: OpenloginAdapterOptions) {\n    super();\n    log.debug(\"const openlogin adapter\", params);\n    const defaultOptions = getOpenloginDefaultOptions(params.chainConfig?.chainNamespace, params.chainConfig?.chainId);\n    this.openloginOptions = {\n      clientId: \"\",\n      network: OPENLOGIN_NETWORK.MAINNET,\n      ...defaultOptions.adapterSettings,\n      ...(params.adapterSettings || {}),\n    };\n    this.clientId = params.adapterSettings?.clientId as string;\n    this.loginSettings = { ...defaultOptions.loginSettings, ...params.loginSettings };\n    this.sessionTime = this.loginSettings.sessionTime || 86400;\n    // if no chainNamespace is passed then chain config should be set before calling init\n    if (params.chainConfig?.chainNamespace) {\n      this.currentChainNamespace = params.chainConfig?.chainNamespace;\n      const defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};\n      this.chainConfig = { ...defaultChainIdConfig, ...params?.chainConfig };\n      log.debug(\"const openlogin chainConfig\", this.chainConfig);\n      if (!this.chainConfig.rpcTarget && params.chainConfig.chainNamespace !== CHAIN_NAMESPACES.OTHER) {\n        throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n      }\n    }\n  }\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.privKeyProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    if (!this.openloginOptions?.clientId) throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    let isRedirectResult = false;\n\n    if (this.openloginOptions.uxMode === UX_MODE.REDIRECT) {\n      const redirectResult = getHashQueryParams();\n      if (Object.keys(redirectResult).length > 0 && redirectResult._pid) {\n        isRedirectResult = true;\n      }\n    }\n    this.openloginOptions = {\n      ...this.openloginOptions,\n      replaceUrlOnRedirect: isRedirectResult,\n    };\n    this.openloginInstance = new OpenLogin(this.openloginOptions);\n    log.debug(\"initializing openlogin adapter init\");\n\n    await this.openloginInstance.init();\n\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n\n    try {\n      log.debug(\"initializing openlogin adapter\");\n      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n      if (this.openloginInstance.privKey && (options.autoConnect || isRedirectResult)) {\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached openlogin provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(params?: OpenloginLoginParams): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { ...params, adapter: WALLET_ADAPTERS.OPENLOGIN });\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error: unknown) {\n      log.error(\"Failed to connect with openlogin provider\", error);\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if ((error as Error)?.message.includes(\"user closed popup\")) {\n        throw WalletLoginError.popupClosed();\n      }\n      throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    await this.openloginInstance.logout();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.openloginInstance = null;\n      this.privKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async authenticateUser(): Promise<{ idToken: string }> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const userInfo = await this.getUserInfo();\n    return {\n      idToken: userInfo.idToken as string,\n    };\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    const userInfo = await this.openloginInstance.getUserInfo();\n    return userInfo;\n  }\n\n  // should be called only before initialization.\n  setAdapterSettings(adapterSettings: OpenLoginOptions & { sessionTime: number }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    const defaultOptions = getOpenloginDefaultOptions();\n    this.openloginOptions = { ...defaultOptions.adapterSettings, ...(this.openloginOptions || {}), ...adapterSettings };\n    if (adapterSettings.sessionTime) {\n      this.loginSettings = { ...this.loginSettings, sessionTime: adapterSettings.sessionTime };\n    }\n    if (adapterSettings.clientId) {\n      this.clientId = adapterSettings.clientId;\n    }\n  }\n\n  // should be called only before initialization.\n  setChainConfig(customChainConfig: CustomChainConfig): void {\n    super.setChainConfig(customChainConfig);\n    this.currentChainNamespace = customChainConfig.chainNamespace;\n  }\n\n  private async connectWithProvider(params?: OpenloginLoginParams): Promise<void> {\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n    if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      const { SolanaPrivateKeyProvider } = await import(\"@web3auth/solana-provider\");\n      this.privKeyProvider = new SolanaPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.EIP155) {\n      const { EthereumPrivateKeyProvider } = await import(\"@web3auth/ethereum-provider\");\n      this.privKeyProvider = new EthereumPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.OTHER) {\n      this.privKeyProvider = new CommonPrivateKeyProvider();\n    } else {\n      throw new Error(`Invalid chainNamespace: ${this.currentChainNamespace} found while connecting to wallet`);\n    }\n    // if not logged in then login\n    if (!this.openloginInstance.privKey && params) {\n      if (!this.loginSettings.curve) {\n        this.loginSettings.curve =\n          this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA ? SUPPORTED_KEY_CURVES.ED25519 : SUPPORTED_KEY_CURVES.SECP256K1;\n      }\n      await this.openloginInstance.login(\n        merge(\n          this.loginSettings,\n          { loginProvider: params.loginProvider },\n          { extraLoginOptions: { ...(params.extraLoginOptions || {}), login_hint: params.login_hint || params.extraLoginOptions?.login_hint } }\n        )\n      );\n    }\n    let finalPrivKey = this.openloginInstance.privKey;\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        const { getED25519Key } = await import(\"@toruslabs/openlogin-ed25519\");\n        finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n      }\n      await this.privKeyProvider.setupProvider(finalPrivKey);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.OPENLOGIN, reconnected: !params } as CONNECTED_EVENT_DATA);\n    }\n  }\n}\n"],"names":["getOpenloginDefaultOptions","chainNamespace","chainId","adapterSettings","network","OPENLOGIN_NETWORK","clientId","uxMode","UX_MODE","chainConfig","getChainConfig","loginSettings","OpenloginAdapter","_inherits","params","_classCallCheck","_this","_defineProperty","WALLET_ADAPTERS","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","ADAPTER_STATUS","CHAIN_NAMESPACES","log","defaultOptions","_params$chainConfig","openloginOptions","_params$adapterSettin","sessionTime","currentChainNamespace","_params$chainConfig4","defaultChainIdConfig","rpcTarget","WalletInitializationError","_createClass","key","get","this","provider","privKeyProvider","set","_","Error","value","options","_get","_context","isRedirectResult","redirectResult","getHashQueryParams","Object","keys","length","_pid","_objectSpread","replaceUrlOnRedirect","openloginInstance","OpenLogin","init","status","emit","ADAPTER_EVENTS","privKey","autoConnect","connect","adapter","_context2","connectWithProvider","message","includes","WalletLoginError","_disconnect","_args3","cleanup","_context3","logout","_authenticateUser","_context4","getUserInfo","userInfo","idToken","_getUserInfo","_context5","customChainConfig","_context6","_yield$import","SolanaPrivateKeyProvider","config","_yield$import2","EthereumPrivateKeyProvider","CommonPrivateKeyProvider","curve","SUPPORTED_KEY_CURVES","login","merge","loginProvider","extraLoginOptions","login_hint","finalPrivKey","_yield$import3","getED25519Key","sk","toString","setupProvider","reconnected","BaseAdapter"],"sourceRoot":""}