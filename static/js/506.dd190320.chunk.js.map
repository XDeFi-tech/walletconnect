{"version":3,"file":"static/js/506.dd190320.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/base-evm-adapter/src/baseEvmAdapter.ts","../node_modules/@web3auth/torus-evm-adapter/src/torusWalletAdapter.ts"],"sourcesContent":["import {\n  ADAPTER_STATUS,\n  BaseAdapter,\n  checkIfTokenIsExpired,\n  clearToken,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\nexport abstract class BaseEvmAdapter<T> extends BaseAdapter<T> {\n  public clientId: string;\n\n  constructor(params: { clientId?: string } = {}) {\n    super();\n    this.clientId = params.clientId;\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || !this.chainConfig?.chainId) throw WalletLoginError.notConnectedError();\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n\n      const signedMessage = await this.provider.request<string>({\n        method: \"personal_sign\",\n        params: [challenge, accounts[0]],\n      });\n\n      const idToken = await verifySignedChallenge(chainNamespace, signedMessage as string, challenge, this.name, this.sessionTime, this.clientId);\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n}\n","import Torus, { LoginParams, NetworkInterface, TorusCtorArgs, TorusParams } from \"@toruslabs/torus-embed\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\n\nexport interface TorusWalletOptions {\n  adapterSettings?: TorusCtorArgs;\n  loginSettings?: LoginParams;\n  initParams?: Omit<TorusParams, \"network\">;\n  chainConfig?: CustomChainConfig;\n  sessionTime?: number;\n  clientId?: string;\n}\n\nexport class TorusWalletAdapter extends BaseEvmAdapter<never> {\n  readonly name: string = WALLET_ADAPTERS.TORUS_EVM;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public torusInstance: Torus | null = null;\n\n  private torusWalletOptions?: TorusCtorArgs;\n\n  private initParams?: TorusParams;\n\n  private loginSettings?: LoginParams = {};\n\n  private rehydrated = false;\n\n  constructor(params: TorusWalletOptions) {\n    super(params);\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n    this.sessionTime = params.sessionTime || 86400;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.torusInstance) {\n      return this.torusInstance.provider as unknown as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    // set chainConfig for mainnet by default if not set\n    let network: NetworkInterface;\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n      const { blockExplorer, displayName, chainId, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n      network = { chainId: Number.parseInt(chainId, 16), host: \"mainnet\", blockExplorer, networkName: displayName, ticker, tickerName };\n    } else {\n      const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n      network = { chainId: Number.parseInt(chainId, 16), host: rpcTarget, blockExplorer, networkName: displayName, ticker, tickerName };\n    }\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus evm adapter init\");\n    await this.torusInstance.init({\n      showTorusButton: false,\n      ...this.initParams,\n      network,\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_EVM);\n\n    try {\n      log.debug(\"initializing torus evm adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with torus evm provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.TORUS_EVM });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      const { chainId } = this.torusInstance.provider;\n      if (chainId && parseInt(chainId) !== parseInt((this.chainConfig as CustomChainConfig).chainId, 16)) {\n        const { chainId: _chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n        const network: NetworkInterface = {\n          chainId: Number.parseInt(_chainId, 16),\n          host: rpcTarget,\n          blockExplorer,\n          networkName: displayName,\n          tickerName,\n          ticker,\n        };\n        // in some cases when user manually switches chain and relogin then adapter will not connect to initially passed\n        // chainConfig but will connect to the one that user switched to.\n        // So here trying to switch network to the one that was initially passed in chainConfig.\n        await this.torusInstance.setProvider({\n          ...network,\n        });\n        const updatedChainID = await this.torusInstance.ethereum.request<string>({ method: \"eth_chainId\" });\n        if (updatedChainID && parseInt(updatedChainID) !== parseInt((this.chainConfig as CustomChainConfig).chainId, 16)) {\n          throw WalletInitializationError.fromCode(\n            5000,\n            `Not connected to correct chainId. Expected: ${(this.chainConfig as CustomChainConfig).chainId}, Current: ${updatedChainID}`\n          );\n        }\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, { adapter: WALLET_ADAPTERS.TORUS_EVM, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_STATUS.ERRORED, error);\n      throw error instanceof Web3AuthError ? error : WalletLoginError.connectionError(\"Failed to login with torus wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await super.disconnect();\n    await this.torusInstance.logout();\n    this.torusInstance.hideTorusButton();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo(\"\");\n    return userInfo;\n  }\n\n  setAdapterSettings(options: { sessionTime?: number; clientId?: string }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n    if (options?.clientId) {\n      this.clientId = options.clientId;\n    }\n  }\n}\n"],"names":["BaseEvmAdapter","_inherits","params","_classCallCheck","_this","_defineProperty","clientId","_createClass","key","value","_authenticateUser","this","provider","chainConfig","_this$chainConfig","chainId","_context","WalletLoginError","_this$chainConfig2","chainNamespace","status","ADAPTER_STATUS","request","method","accounts","length","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","window","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","signChallenge","challenge","signedMessage","verifySignedChallenge","sessionTime","saveToken","_disconnect","_context2","clearToken","BaseAdapter","TorusWalletAdapter","WALLET_ADAPTERS","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","torusWalletOptions","adapterSettings","initParams","loginSettings","get","torusInstance","set","_","Error","options","_get","blockExplorer","displayName","rpcTarget","ticker","tickerName","network","Number","host","networkName","getChainConfig","Torus","log","init","showTorusButton","emit","ADAPTER_EVENTS","autoConnect","rehydrated","connect","_connect","WalletInitializationError","adapter","login","_this$chainConfig3","_chainId","setProvider","ethereum","updatedChainID","reconnected","Web3AuthError","_args3","cleanup","_context3","logout","hideTorusButton","_getUserInfo","_context4","getUserInfo","userInfo"],"sourceRoot":""}