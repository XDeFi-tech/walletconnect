{"version":3,"file":"static/js/614.2c8c94e6.chunk.js","mappings":"quBAaA,IAAsBA,EAAtB,aAAAC,EAAAA,EAAAA,GAAAA,EAAAA,GAAA,WAGE,SAA8CD,IAAA,MAAlCE,EAAkC,uDAAF,CAAC,EAAC,OAAAC,EAAAA,EAAAA,GAAAA,KAAAA,GAC5CC,EAAAA,EAAAA,KAAAA,OAD4CC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,gBAAAA,GAE5CD,EAAKE,SAAWJ,EAAOI,SAFqB,CAG7C,CANH,OAAAC,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAC,IAAAA,mBAAAC,MAAAA,WAAA,IAQEC,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,4FACOC,KAAKC,UAAY,UAACD,KAAKE,mBAAN,OAACC,EAAkBC,QAD3C,CAAAC,EAAAA,KAAAA,EAAA,YAC0DC,EAAAA,GAAAA,oBAD1D,UAAAC,EAEsCP,KAAKE,YAAjCM,EAFV,EAEUA,eAAgBJ,EAF1B,EAE0BA,QAEpBJ,KAAKS,SAAWC,EAAAA,GAAAA,UAJtB,CAAAL,EAAAA,KAAAA,EAAA,YAIsDC,EAAAA,GAAAA,kBAAmC,yDAJzF,cAAAD,EAAAA,KAAAA,EAKyBL,KAAKC,SAASU,QAAkB,CACrDC,OAAQ,iBANZ,aAKQC,EALR,SAQkBA,EAASC,OAAS,GARpC,CAAAT,EAAAA,KAAAA,GAAA,WASUU,GAAgBC,EAAAA,EAAAA,IAAcH,EAAS,GAAcb,KAAKiB,OATpE,CAAAZ,EAAAA,KAAAA,GAAA,UAWwBa,EAAAA,EAAAA,IAAsBH,GAX9C,CAAAV,EAAAA,KAAAA,GAAA,aAaeA,EAAAA,OAAAA,SAAAA,CAAEc,QAASJ,IAb1B,eAiBUK,EAAU,CACdC,OAAQC,OAAOC,SAASC,OACxBC,IAAKH,OAAOC,SAASG,KACrBC,QAASd,EAAS,GAClBT,QAASwB,SAASxB,EAAS,IAC3ByB,QAAS,IACTC,MAAOC,KAAKC,SAASC,SAAS,IAAIC,MAAM,GACxCC,UAAU,IAAIC,MAAOC,eAxB3BhC,EAAAA,KAAAA,IA2B4BiC,EAAAA,EAAAA,IAAclB,EAASZ,GA3BnD,eA2BU+B,EA3BV,OAAAlC,EAAAA,KAAAA,GA6BgCL,KAAKC,SAASU,QAAgB,CACxDC,OAAQ,gBACRrB,OAAQ,CAACgD,EAAW1B,EAAS,MA/BnC,eA6BU2B,EA7BV,OAAAnC,EAAAA,KAAAA,IAkC0BoC,EAAAA,EAAAA,IAAsBjC,EAAgBgC,EAAyBD,EAAWvC,KAAKiB,KAAMjB,KAAK0C,YAAa1C,KAAKL,UAlCtI,eAkCUwB,EAlCV,QAmCIwB,EAAAA,EAAAA,IAAU9B,EAAS,GAAcb,KAAKiB,KAAME,GACrCd,EAAAA,OAAAA,SAAAA,CACLc,QAAAA,IArCN,cAwCQb,EAAAA,GAAAA,kBAAmC,yDAxC3C,4C,KARF,kDAAAR,IAAA,CAAAD,IAAAA,aAAAC,MAAAA,WAAA,IAmDE8C,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,0EACM5C,KAAKS,SAAWC,EAAAA,GAAAA,UADtB,CAAAmC,EAAAA,KAAAA,EAAA,YACsDvC,EAAAA,GAAAA,mBAAoC,6BAD1F,cAAAuC,EAAAA,KAAAA,EAEyB7C,KAAKC,SAASU,QAAkB,CACrDC,OAAQ,iBAHZ,QAEQC,EAFR,SAKkBA,EAASC,OAAS,IAChCgC,EAAAA,EAAAA,IAAWjC,EAAS,GAAIb,KAAKiB,MANjC,2C,KAnDF,kDAAAnB,MAAA,GAAgDiD,EAAAA,G,sQCXnCC,EAAsE,CACjF,CACE/B,KAAM,UACNgC,OAAQ,CAACC,EAAAA,GAAAA,QACTC,KAAM,+CACNC,OAAQ,CACNC,OAAQ,WACRC,UAAW,uBAEbC,QAAS,CACPF,OAAQ,GACRC,UAAW,KAGf,CACErC,KAAM,WACNgC,OAAQ,CAACC,EAAAA,GAAAA,QACTC,KAAM,gDACNC,OAAQ,CACNC,OAAQ,YACRC,UAAW,6BAEbC,QAAS,CACPF,OAAQ,GACRC,UAAW,M,4pBCGXE,EAAAA,SAAAA,I,uBAwBJ,WAAYC,GAAsC,aAAAjE,EAAAA,EAAAA,GAAAA,KAAAA,GAChDC,EAAAA,EAAAA,KAAAA,KAAMgE,IAD0C/D,EAAAA,EAAAA,IAvB1BgE,EAAAA,EAAAA,GAAAA,GAAAA,OAAAA,EAAAA,GAAAA,oBAuB0BhE,EAAAA,EAAAA,IArBAiE,EAAAA,EAAAA,GAAAA,GAAAA,mBAAAA,EAAAA,GAAAA,SAqBAjE,EAAAA,EAAAA,IAnBGwD,EAAAA,EAAAA,GAAAA,GAAAA,wBAAAA,EAAAA,GAAAA,SAmBHxD,EAAAA,EAAAA,IAjBXkE,EAAAA,EAAAA,GAAAA,GAAAA,OAAAA,EAAAA,GAAAA,WAiBWlE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,sBAAAA,IAAAA,EAAAA,EAAAA,IAbbgB,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,EAAAA,GAAAA,YAaahB,EAAAA,EAAAA,IAXR,yBACxC+B,IAAK,GACLoC,kBAAmBb,KAS6BtD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,YANT,OAMSA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,aAJC,OAIDA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,GAAAA,cAF7B,GAInBD,EAAKqE,e,qWAAL,IAA2BL,GAC3BhE,EAAKS,YAAcuD,EAAQvD,aAAe,KAC1CT,EAAKiD,YAAce,EAAQf,aAAe,MAJM,CAKjD,C,sCAED,WAAa,MACX,QAAS,UAAA1C,KAAK+D,iBAAL,UAAgBC,UAC1B,G,oBAED,WAAY,MACV,OAAwB/D,QAAZgE,EAAAA,KAAAA,kBAAYhE,IAAAA,OAAAA,EAAAA,EAAAA,WAAY,I,EAGtCiE,IAAAA,SAAaC,GACX,MAAM,IAAIC,MAAM,kBACjB,G,6BAED,0GACEC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,kCAAAA,MAAAA,KAAAA,MACKrE,KAAKE,cACRF,KAAKE,aAAcoE,EAAAA,EAAAA,IAAepB,EAAAA,GAAAA,OAAyB,IAG7DlD,KAAK+D,UAAY/D,KAAKuE,2BACtBvE,KAAKiE,WAAa,IAAIO,EAAAA,sBAAsB,CAAEC,OAAQ,CAAEvE,YAAaF,KAAKE,aAAoC6D,UAAW/D,KAAK+D,YAE9H/D,KAAK0E,KAAKC,EAAAA,GAAAA,MAAsBjB,EAAAA,GAAAA,mBAChC1D,KAAKS,OAASC,EAAAA,GAAAA,MACdkE,EAAAA,GAAAA,MAAU,2CACN5E,KAAK+D,UAAUC,UAZrB,CAAA3D,EAAAA,KAAAA,GAAA,aAaIL,KAAK6E,YAAa,EAbtBxE,EAAAA,KAAAA,GAcUL,KAAK8E,iBAAiB,CAAEjE,SAAUb,KAAK+D,UAAUlD,SAAUT,QAASJ,KAAK+D,UAAU3D,UAd7F,4C,2FAkBA,yHACEiE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,8BAAAA,MAAAA,KAAAA,MACKrE,KAAK+D,UAFZ,CAAAgB,EAAAA,KAAAA,EAAA,YAE6BC,EAAAA,GAAAA,SAAmC,mCAFhE,WAIMhF,KAAKgE,UAJX,CAAAe,EAAAA,KAAAA,EAAA,aAAAA,EAAAA,KAAAA,EAKU/E,KAAK8E,iBAAiB,CAAEjE,SAAUb,KAAK+D,UAAUlD,SAAUT,QAASJ,KAAK+D,UAAU3D,UAL7F,gCAMWJ,KAAKC,UANhB,UASMD,KAAKS,SAAWC,EAAAA,GAAAA,WATtB,CAAAqE,EAAAA,KAAAA,GAAA,aAYQ,QAAJ,EAAI/E,KAAK8D,eAAemB,uBAApB,SAAqCC,cACvClF,KAAK+D,UAAY/D,KAAKuE,2BACtBvE,KAAKiE,WAAa,IAAIO,EAAAA,sBAAsB,CAC1CC,OAAQ,CACNvE,YAAaF,KAAKE,YAElBiF,kBAAiB,UAAEnF,KAAK8D,eAAemB,uBAAtB,aAAEG,EAAqCC,sBAE1DtB,UAAW/D,KAAK+D,aApBxBgB,EAAAA,KAAAA,GAuBU/E,KAAKsF,mBAvBf,QAwBItF,KAAKS,OAASC,EAAAA,GAAAA,WACdV,KAAK0E,KAAKC,EAAAA,GAAAA,WAA2B,CAAEY,QAAS7B,EAAAA,GAAAA,oBAzBpD,iCA2BS,IAAI8B,SAAQ,SAACC,EAASC,GAC3B,IAAKC,EAAK5B,UAAW,OAAO2B,EAAOV,EAAAA,GAAAA,SAAmC,oCAEtEW,EAAK5B,UAAU6B,GAAG,gBAAgBC,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,IAAA,wEAChCF,EAAKlF,OAASC,EAAAA,GAAAA,MACdiF,EAAKjB,KAAKC,EAAAA,GAAAA,MAAsBjB,EAAAA,GAAAA,mBAFA,kBAGzBgC,EAAO,IAAItB,MAAM,uBAHQ,sC,MAKlC,IAEEuB,EAAK5B,UAAU6B,GAAG,UAAlB,eAA6BE,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,EAAOC,EAAqB3E,GAA5B,wEACvB2E,GACFJ,EAAKjB,KAAKC,EAAAA,GAAAA,QAAwBoB,GAEpCnB,EAAAA,GAAAA,MAAU,uCAJiBoB,EAAAA,KAAAA,EAKrBL,EAAKb,iBAAiB1D,EAAQ7B,OAAO,IALhB,gCAMpBkG,EAAQE,EAAK1F,WANO,sC,KAA7B,oCAAAD,KAAA,eAmBD,CAXC,MAAO+F,GACPnB,EAAAA,GAAAA,MAAU,mDAAoDmB,GAE9DJ,EAAKlF,OAASC,EAAAA,GAAAA,MACdiF,EAAKd,YAAa,EAClBc,EAAKjB,KAAKC,EAAAA,GAAAA,QAAwBoB,GAClCL,EACEK,aAAiBE,EAAAA,GACbF,EACAzF,EAAAA,GAAAA,gBAA0E,uDAAAyF,QAAe,IAAfA,OAAA,EAAAA,EAAiBG,UAAW,KAE7G,CACF,KAzDH,4C,qFA4DApG,MAAAA,SAAmB2D,GACbzD,KAAKS,SAAWC,EAAAA,GAAAA,QAChB+C,OAAAA,QAAJ,IAAIA,GAAAA,EAASf,cACX1C,KAAK0C,YAAce,EAAQf,aAEzBe,OAAAA,QAAJ,IAAIA,GAAAA,EAAS9D,WACXK,KAAKL,SAAW8D,EAAQ9D,UAE3B,G,oCAED,yGACOK,KAAKgE,UADZ,CAAAmC,EAAAA,KAAAA,EAAA,YAC6B7F,EAAAA,GAAAA,kBAAmC,yDADhE,gCAES,CAAC,GAFV,2C,8FAKA,2CAAA8F,EAAAC,EAAAA,UAAA,oEAAiB5C,EAAgC4C,EAAAA,OAAAA,QAAAA,IAAAA,EAAAA,GAAAA,EAAAA,GAAAA,CAAED,SAAS,GAClDA,EAAY3C,EAAZ2C,QACHpG,KAAK+D,WAAc/D,KAAKgE,UAF/B,CAAAsC,EAAAA,KAAAA,EAAA,YAEgDhG,EAAAA,GAAAA,kBAAmC,6BAFnF,cAAAgG,EAAAA,KAAAA,GAAA,wEAAAA,EAAAA,KAAAA,EAIQtG,KAAK+D,UAAUwC,cAJvB,OAKEvG,KAAK6E,YAAa,EACduB,GACFpG,KAAK+D,UAAY,KACjB/D,KAAKS,OAASC,EAAAA,GAAAA,UACdV,KAAKiE,WAAa,MAGlBjE,KAAKS,OAASC,EAAAA,GAAAA,MAEhBV,KAAK0E,KAAKC,EAAAA,GAAAA,cAdZ,4C,4FAiBQ,mCAAezE,GAAf,4EAAAsG,EAAAA,KAAAA,EAECxG,KAAKiE,WAFN,CAAAuC,EAAAA,KAAAA,EAAA,YAEwBxB,EAAAA,GAAAA,SAAmC,mCAF3D,YAGEyB,EAHF,UAGkBzG,KAAK8D,eAAemB,uBAHtC,aAGkByB,EAAqCC,oBAHvD,CAAAH,EAAAA,KAAAA,EAAA,aAAAA,EAAAA,KAAAA,EAKIC,EAAcG,WAAW,CAAE1G,YAAAA,EAAa2G,UAAWvF,OAAOC,SAASuF,WALvE,cAAAN,EAAAA,KAAAA,EAOExG,KAAKiE,WAAW8C,SAAS7G,GAP3B,OAAAsG,EAAAA,KAAAA,GAAA,cAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GASJ5B,EAAAA,GAAAA,MAAA,MATI,qD,wHAaA,SAAkBoC,EAAAA,EAAkD9G,GAApE,4EACDF,KAAKiE,WADJ,CAAAgD,EAAAA,KAAAA,EAAA,YACsBjC,EAAAA,GAAAA,SAAmC,mCADzD,YAEAyB,EAFA,UAEgBzG,KAAK8D,eAAemB,uBAFpC,aAEgBiC,EAAqCP,oBAFrD,CAAAM,EAAAA,KAAAA,EAAA,aAAAA,EAAAA,KAAAA,EAKER,EAAcU,cAAc,CAChCC,mBAAoBlH,EACpBmH,eAAgBL,EAChBH,UAAWvF,OAAOC,SAASuF,WARzB,cAAAG,EAAAA,KAAAA,EAWAjH,KAAKiE,WAAWqD,YAAY,CAAElH,QAASF,EAAYE,QAASmH,QAAQ,EAAOR,UAAU,IAXrF,2C,uGAcA,2CAAAS,EAAA,EAAArH,EAAAsH,EAAAA,KAAAC,EAAAA,UAAA,oEAAuBC,EAAqCD,EAAAA,OAAAA,QAAAA,IAAAA,EAAAA,GAAAA,EAAAA,GAAAA,CAAEE,iBAAiB,GAChF5H,KAAK+D,UADJ,CAAA8D,EAAAA,KAAAA,EAAA,YACqB7C,EAAAA,GAAAA,SAAmC,mCADxD,WAEF2C,EAAKC,kBAAmB5H,KAAK+D,UAAU+D,QAFrC,CAAAD,EAAAA,KAAAA,EAAA,aAAAA,EAAAA,KAAAA,EAGE7H,KAAK+D,UAAUwC,cAHjB,oBAMFvG,KAAK8D,sBANH,iBAMFiE,EAAqB9C,uBANnB,QAMFuC,EAAsCtC,YANpC,CAAA2C,EAAAA,KAAAA,GAAA,aAAAA,EAAAA,KAAAA,EAOE7H,KAAK+D,UAAUiE,cAAc,CAAE5H,QAASwB,UAAS,QAAK1B,EAAAA,KAAAA,mBAAL,eAAkBE,UAAW,MAAO,MAPvF,kEAYC,IAAIoF,SAAc,SAACC,EAASC,GAAU,MAC3C,IAAK+B,EAAK1D,UAAW,OAAO2B,EAAOV,EAAAA,GAAAA,SAAmC,oCACtEJ,EAAAA,GAAAA,MAAU,oDACV6C,EAAK1D,UAAU6B,GAAG,cAAlB,eAAiCqC,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAAA,SAAAA,EAAOC,EAAK9G,GAAZ,6EAC3B8G,EAD2B,CAAAC,EAAAA,KAAAA,EAAA,aAE7BV,EAAK/C,KAAKC,EAAAA,GAAAA,QAAwBrE,EAAAA,GAAAA,gBAAiC,6CAC5DoF,EAAAA,OAAAA,SAAAA,EAAOwC,IAHe,cAKzBzG,EAAML,EAAQ7B,OAAO,GAC3BkI,EAAKW,kBAAkB,CAAE3G,IAAAA,EAAKoC,kBAAmBb,IAEjCqF,QAAhB,IAAKtE,iBAAWsE,IAAAA,GAAAA,EAAAA,IAAI,eARW,kBASxB5C,KATwB,sC,KAAjC,oCAAAzF,KAAA,gBAYAyH,EAAK1D,UAAUiE,cAAc,CAAE5H,QAASwB,UAAS,QAAI,IAAC1B,mBAAL,eAAkBE,UAAW,MAAO,MAAOkI,OAAM,SAACvC,GAGjG,OAFAnB,EAAAA,GAAAA,MAAU,kDAAmDmB,GAC7D0B,EAAK/C,KAAKC,EAAAA,GAAAA,QAAwBoB,GAC3BL,EAAOK,E,GAEjB,KAhCK,4C,oGAmCA,mCAAuBxG,GAAvB,oFACDS,KAAK+D,WAAc/D,KAAKiE,WADvB,CAAAsE,EAAAA,KAAAA,EAAA,YACyCvD,EAAAA,GAAAA,SAAmC,mCAD5E,UAEDhF,KAAKE,YAFJ,CAAAqI,EAAAA,KAAAA,EAAA,YAEuBvD,EAAAA,GAAAA,cAAwC,2BAF/D,UAIE5E,EAAYb,EAAZa,QACRwE,EAAAA,GAAAA,MAAU,4BACNxE,IAAYwB,SAAS5B,KAAKE,YAAYE,QAAS,IAN7C,CAAAmI,EAAAA,KAAAA,GAAA,SAOEvB,GAAuB1C,EAAAA,EAAAA,IAAepB,EAAAA,GAAAA,OAAyB9C,IAAY,CAC/EA,QAAS,KAAF,OAAOA,EAAQ6B,SAAS,KAC/BuG,YAAa,oBAGTC,EAAa,QAZf,EAYezI,KAAK8D,eAAemB,uBAApB,eAAqCC,gBAEpCuD,GAAc,QAAC,EAAAzI,KAAK8D,sBAAN,OAAC,QAAD,EAAC4E,EAAqBzD,uBAArB,SAAsCI,sBAdrE,CAAAkD,EAAAA,KAAAA,GAAA,aAAAA,EAAAA,KAAAA,GAAAA,EAAAA,KAAAA,GAgBMvI,KAAK+G,SAAS/G,KAAKE,aAhBzB,eAAAqI,EAAAA,KAAAA,GAiBMvI,KAAKsH,YAAYN,EAAsBhH,KAAKE,aAjBlD,QAkBAF,KAAK+D,UAAY/D,KAAKuE,2BAlBtBgE,EAAAA,KAAAA,GAAA,qBAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,IAoBA3D,EAAAA,GAAAA,MAAU,8BAAV,MApBA2D,EAAAA,KAAAA,GAuBMvI,KAAKsF,iBAAiB,CAAEsC,iBAAiB,IAvB/C,eAwBA5H,KAAK0E,KACHC,EAAAA,GAAAA,QACAK,EAAAA,GAAAA,SACE,IADF,sDAEiDhF,KAAKE,YAAYsI,YAC9D,uBAAoB,OAApBxB,QAAA,IAAAA,OAAA,EAAAA,EAAsBwB,cAAepI,EAL3C,oDASAJ,KAAKS,OAASC,EAAAA,GAAAA,MACdV,KAAK6E,YAAa,EAlClB,kCAAA0D,EAAAA,KAAAA,GAuCAvI,KAAKiE,WAAW0E,cAAc3I,KAAK+D,WAvCnC,QAwCN/D,KAAK4I,gBAAgB5I,KAAK+D,WAC1B/D,KAAKS,OAASC,EAAAA,GAAAA,UACdV,KAAK0E,KAAKC,EAAAA,GAAAA,UAA0B,CAAEY,QAAS7B,EAAAA,GAAAA,kBAAmCmF,YAAa7I,KAAK6E,aA1C9F,sD,mFA6CA/E,MAAAA,SAAgBiE,GAAwB,WAC9CA,EAAU6B,GAAG,iBAAb,mCAA+B,WAAOG,GAAP,iEACzBA,GACF+C,EAAKpE,KAAKC,EAAAA,GAAAA,QAAwBoB,GAFP,sC,KAA/B,sDAKD,G,sCAEO,WACN,IAAMgD,EAAuB/I,KAAK8D,eAAemB,iBAAmB,CAAC,EAGrE,OAFA8D,EAAqBC,OAASD,EAAqBC,QAAU,mCAEtD,IAAIC,EAAAA,EAAcF,EAC1B,K,EAjRGvF,CAA+BnE,EAAAA,E","sources":["../node_modules/@web3auth/base-evm-adapter/src/baseEvmAdapter.ts","../node_modules/@web3auth/wallet-connect-v1-adapter/src/config.ts","../node_modules/@web3auth/wallet-connect-v1-adapter/src/walletConnectV1adapter.ts"],"sourcesContent":["import {\n  ADAPTER_STATUS,\n  BaseAdapter,\n  checkIfTokenIsExpired,\n  clearToken,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\nexport abstract class BaseEvmAdapter<T> extends BaseAdapter<T> {\n  public clientId: string;\n\n  constructor(params: { clientId?: string } = {}) {\n    super();\n    this.clientId = params.clientId;\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || !this.chainConfig?.chainId) throw WalletLoginError.notConnectedError();\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n\n      const signedMessage = await this.provider.request<string>({\n        method: \"personal_sign\",\n        params: [challenge, accounts[0]],\n      });\n\n      const idToken = await verifySignedChallenge(chainNamespace, signedMessage as string, challenge, this.name, this.sessionTime, this.clientId);\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n}\n","import { CHAIN_NAMESPACES, IWalletConnectExtensionAdapter } from \"@web3auth/base\";\n\nexport const WALLET_CONNECT_EXTENSION_ADAPTERS: IWalletConnectExtensionAdapter[] = [\n  {\n    name: \"Rainbow\",\n    chains: [CHAIN_NAMESPACES.EIP155],\n    logo: \"https://images.web3auth.io/login-rainbow.svg\",\n    mobile: {\n      native: \"rainbow:\",\n      universal: \"https://rnbwapp.com\",\n    },\n    desktop: {\n      native: \"\",\n      universal: \"\",\n    },\n  },\n  {\n    name: \"MetaMask\",\n    chains: [CHAIN_NAMESPACES.EIP155],\n    logo: \"https://images.web3auth.io/login-metamask.svg\",\n    mobile: {\n      native: \"metamask:\",\n      universal: \"https://metamask.app.link\",\n    },\n    desktop: {\n      native: \"\",\n      universal: \"\",\n    },\n  },\n];\n","import WalletConnect from \"@walletconnect/client\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletConnectV1Data,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\nimport { WalletConnectProvider } from \"@web3auth/ethereum-provider\";\n\nimport { WALLET_CONNECT_EXTENSION_ADAPTERS } from \"./config\";\nimport { WalletConnectV1AdapterOptions } from \"./interface\";\n\nclass WalletConnectV1Adapter extends BaseEvmAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.WALLET_CONNECT_V1;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly adapterOptions: WalletConnectV1AdapterOptions;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public adapterData: WalletConnectV1Data = {\n    uri: \"\",\n    extensionAdapters: WALLET_CONNECT_EXTENSION_ADAPTERS,\n  };\n\n  public connector: WalletConnect | null = null;\n\n  private wcProvider: WalletConnectProvider | null = null;\n\n  private rehydrated = false;\n\n  constructor(options: WalletConnectV1AdapterOptions) {\n    super(options);\n    this.adapterOptions = { ...options };\n    this.chainConfig = options.chainConfig || null;\n    this.sessionTime = options.sessionTime || 86400;\n  }\n\n  get connected(): boolean {\n    return !!this.connector?.connected;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.wcProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(): Promise<void> {\n    super.checkInitializationRequirements();\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n    }\n    // Create a connector\n    this.connector = this.getWalletConnectInstance();\n    this.wcProvider = new WalletConnectProvider({ config: { chainConfig: this.chainConfig as CustomChainConfig }, connector: this.connector });\n\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.WALLET_CONNECT_V1);\n    this.status = ADAPTER_STATUS.READY;\n    log.debug(\"initializing wallet connect v1 adapter\");\n    if (this.connector.connected) {\n      this.rehydrated = true;\n      await this.onConnectHandler({ accounts: this.connector.accounts, chainId: this.connector.chainId });\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n\n    if (this.connected) {\n      await this.onConnectHandler({ accounts: this.connector.accounts, chainId: this.connector.chainId });\n      return this.provider;\n    }\n\n    if (this.status !== ADAPTER_STATUS.CONNECTING) {\n      // for wallet connect qr code modal we have to create a new connector, coz wallet connect internally does not open\n      // modal again on existing instance if connection is pending.\n      if (this.adapterOptions.adapterSettings?.qrcodeModal) {\n        this.connector = this.getWalletConnectInstance();\n        this.wcProvider = new WalletConnectProvider({\n          config: {\n            chainConfig: this.chainConfig as CustomChainConfig,\n            // network switching can be skipped with custom ui\n            skipLookupNetwork: this.adapterOptions.adapterSettings?.skipNetworkSwitching,\n          },\n          connector: this.connector,\n        });\n      }\n      await this.createNewSession();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.WALLET_CONNECT_V1 });\n    }\n    return new Promise((resolve, reject) => {\n      if (!this.connector) return reject(WalletInitializationError.notReady(\"Wallet adapter is not ready yet\"));\n      // for wallet connect default modal.\n      this.connector.on(\"modal_closed\", async () => {\n        this.status = ADAPTER_STATUS.READY;\n        this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.WALLET_CONNECT_V1);\n        return reject(new Error(\"User closed modal\"));\n      });\n      try {\n        // Subscribe to session connection\n        this.connector.on(\"connect\", async (error: Error | null, payload: { params: { accounts: string[]; chainId: number }[] }) => {\n          if (error) {\n            this.emit(ADAPTER_EVENTS.ERRORED, error);\n          }\n          log.debug(\"connected event emitted by web3auth\");\n          await this.onConnectHandler(payload.params[0]);\n          return resolve(this.provider);\n        });\n      } catch (error: unknown) {\n        log.error(\"Wallet connect v1 adapter error while connecting\", error);\n        // ready again to be connected\n        this.status = ADAPTER_STATUS.READY;\n        this.rehydrated = true;\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n        reject(\n          error instanceof Web3AuthError\n            ? error\n            : WalletLoginError.connectionError(`Failed to login with wallet connect: ${(error as Error)?.message || \"\"}`)\n        );\n      }\n    });\n  }\n\n  setAdapterSettings(options: { sessionTime?: number; clientId?: string }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n    if (options?.clientId) {\n      this.clientId = options.clientId;\n    }\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (!this.connected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    const { cleanup } = options;\n    if (!this.connector || !this.connected) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    await super.disconnect();\n    await this.connector.killSession();\n    this.rehydrated = false;\n    if (cleanup) {\n      this.connector = null;\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.wcProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  private async addChain(chainConfig: CustomChainConfig): Promise<void> {\n    try {\n      if (!this.wcProvider) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n      const networkSwitch = this.adapterOptions.adapterSettings?.networkSwitchModal;\n      if (networkSwitch) {\n        await networkSwitch.addNetwork({ chainConfig, appOrigin: window.location.hostname });\n      }\n      await this.wcProvider.addChain(chainConfig);\n    } catch (error) {\n      log.error(error);\n    }\n  }\n\n  private async switchChain(connectedChainConfig: Partial<CustomChainConfig>, chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.wcProvider) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    const networkSwitch = this.adapterOptions.adapterSettings?.networkSwitchModal;\n\n    if (networkSwitch) {\n      await networkSwitch.switchNetwork({\n        currentChainConfig: chainConfig,\n        newChainConfig: connectedChainConfig,\n        appOrigin: window.location.hostname,\n      });\n    }\n    await this.wcProvider.switchChain({ chainId: chainConfig.chainId, lookup: false, addChain: false });\n  }\n\n  private async createNewSession(opts: { forceNewSession: boolean } = { forceNewSession: false }): Promise<void> {\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    if (opts.forceNewSession && this.connector.pending) {\n      await this.connector.killSession();\n    }\n    // for wallet connect qr modal\n    if (this.adapterOptions?.adapterSettings?.qrcodeModal) {\n      await this.connector.createSession({ chainId: parseInt(this.chainConfig?.chainId || \"0x1\", 16) });\n      return;\n    }\n\n    // for web3auth qr code modal\n    return new Promise<void>((resolve, reject) => {\n      if (!this.connector) return reject(WalletInitializationError.notReady(\"Wallet adapter is not ready yet\"));\n      log.debug(\"creating new session for web3auth wallet connect\");\n      this.connector.on(\"display_uri\", async (err, payload) => {\n        if (err) {\n          this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.connectionError(\"Failed to display wallet connect qr code\"));\n          return reject(err);\n        }\n        const uri = payload.params[0];\n        this.updateAdapterData({ uri, extensionAdapters: WALLET_CONNECT_EXTENSION_ADAPTERS } as WalletConnectV1Data);\n\n        this.connector?.off(\"display_uri\");\n        return resolve();\n      });\n\n      this.connector.createSession({ chainId: parseInt(this.chainConfig?.chainId || \"0x1\", 16) }).catch((error) => {\n        log.error(\"error while creating new wallet connect session\", error);\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n        return reject(error);\n      });\n    });\n  }\n\n  private async onConnectHandler(params: { accounts: string[]; chainId: number }) {\n    if (!this.connector || !this.wcProvider) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"Chain config is not set\");\n\n    const { chainId } = params;\n    log.debug(\"connected chainId in hex\");\n    if (chainId !== parseInt(this.chainConfig.chainId, 16)) {\n      const connectedChainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, chainId) || {\n        chainId: `0x${chainId.toString(16)}`,\n        displayName: \"Unknown Network\",\n      };\n\n      const isCustomUi = this.adapterOptions.adapterSettings?.qrcodeModal;\n      // skipping network is not allowed in default ui. We are use network switching modal for default ui.\n      if (!isCustomUi || (isCustomUi && !this.adapterOptions?.adapterSettings?.skipNetworkSwitching)) {\n        try {\n          await this.addChain(this.chainConfig);\n          await this.switchChain(connectedChainConfig, this.chainConfig);\n          this.connector = this.getWalletConnectInstance();\n        } catch (error) {\n          log.error(\"error while chain switching\", error);\n          // we need to create a new session since old session is already used and\n          // user needs to login again with correct chain with new qr code.\n          await this.createNewSession({ forceNewSession: true });\n          this.emit(\n            ADAPTER_EVENTS.ERRORED,\n            WalletInitializationError.fromCode(\n              5000,\n              `Not connected to correct network. Expected: ${this.chainConfig.displayName}, Current: ${\n                connectedChainConfig?.displayName || chainId\n              }, Please switch to correct network from wallet`\n            )\n          );\n          this.status = ADAPTER_STATUS.READY;\n          this.rehydrated = true;\n          return;\n        }\n      }\n    }\n    await this.wcProvider.setupProvider(this.connector);\n    this.subscribeEvents(this.connector);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.WALLET_CONNECT_V1, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n  }\n\n  private subscribeEvents(connector: WalletConnect): void {\n    connector.on(\"session_update\", async (error: Error | null) => {\n      if (error) {\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n      }\n    });\n  }\n\n  private getWalletConnectInstance(): WalletConnect {\n    const walletConnectOptions = this.adapterOptions.adapterSettings || {};\n    walletConnectOptions.bridge = walletConnectOptions.bridge || \"https://bridge.walletconnect.org\";\n    // Create a connector\n    return new WalletConnect(walletConnectOptions);\n  }\n}\n\nexport { WalletConnectV1Adapter };\n"],"names":["BaseEvmAdapter","_inherits","params","_classCallCheck","_this","_defineProperty","clientId","_createClass","key","value","_authenticateUser","this","provider","chainConfig","_this$chainConfig","chainId","_context","WalletLoginError","_this$chainConfig2","chainNamespace","status","ADAPTER_STATUS","request","method","accounts","length","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","window","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","signChallenge","challenge","signedMessage","verifySignedChallenge","sessionTime","saveToken","_disconnect","_context2","clearToken","BaseAdapter","WALLET_CONNECT_EXTENSION_ADAPTERS","chains","CHAIN_NAMESPACES","logo","mobile","native","universal","desktop","WalletConnectV1Adapter","options","WALLET_ADAPTERS","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","extensionAdapters","adapterOptions","connector","connected","wcProvider","set","_","Error","_get","getChainConfig","getWalletConnectInstance","WalletConnectProvider","config","emit","ADAPTER_EVENTS","log","rehydrated","onConnectHandler","_context4","WalletInitializationError","adapterSettings","qrcodeModal","skipLookupNetwork","_this$adapterOptions$2","skipNetworkSwitching","createNewSession","adapter","Promise","resolve","reject","_this2","on","_asyncToGenerator","_ref2","error","_context3","Web3AuthError","message","_context5","cleanup","_args6","_context6","killSession","_context7","networkSwitch","_this$adapterOptions$3","networkSwitchModal","addNetwork","appOrigin","hostname","addChain","connectedChainConfig","_context8","_this$adapterOptions$4","switchNetwork","currentChainConfig","newChainConfig","switchChain","lookup","_this$adapterOptions$5","_this3","_args10","opts","forceNewSession","_context10","pending","_this$adapterOptions","createSession","_ref3","err","_context9","updateAdapterData","off","catch","_context11","displayName","isCustomUi","_this$adapterOptions2","setupProvider","subscribeEvents","reconnected","_this4","walletConnectOptions","bridge","WalletConnect"],"sourceRoot":""}