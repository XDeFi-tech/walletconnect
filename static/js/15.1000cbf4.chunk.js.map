{"version":3,"sources":["../../src/utils.ts"],"names":["l","nacl","privKey","Buffer","d","p","sk","pk","i"],"mappings":"4PAQMA,E,OAAKC,EAAX,SAEM,cAIJ,MAEEC,EADF,kBAAI,EACQC,SAAVD,OAEAA,EAIF,IAAME,EAAI,eAAV,IACMC,EAAI,CAACL,EAAD,KAASA,EAAT,KAAiBA,EAAjB,KAAyBA,EAAnC,MACMM,EAAK,qCAAmB,eAAJ,IAAf,YAA+C,eAA1D,OACMC,EAAK,eAAX,IACAP,sBAEAI,UAEAA,WAEAA,UACAJ,kBACAA,YACA,IAAK,IAAIQ,EAAT,EAAgBA,EAAhB,GAAwBA,GAAxB,EAAgCF,EAAGE,EAAHF,IAAaC,EAAbD,GAEhC,MAAO,CAAEA,GAAIH,OAAN,GAAuBI,GAAIJ,a","file":"static/js/15.1000cbf4.chunk.js","sourcesContent":["import nacl from '@toruslabs/tweetnacl-js';\n\nconst l = nacl.lowlevel;\nfunction getED25519Key(privateKey) {\n  let privKey;\n\n  if (typeof privateKey === \"string\") {\n    privKey = Buffer.from(privateKey, \"hex\");\n  } else {\n    privKey = privateKey;\n  } // Implementation copied from tweetnacl\n\n\n  const d = new Uint8Array(64);\n  const p = [l.gf(), l.gf(), l.gf(), l.gf()];\n  const sk = new Uint8Array([...new Uint8Array(privKey), ...new Uint8Array(32)]);\n  const pk = new Uint8Array(32);\n  l.crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n  l.scalarbase(p, d);\n  l.pack(pk, p);\n\n  for (let i = 0; i < 32; i += 1) sk[i + 32] = pk[i];\n\n  return {\n    sk: Buffer.from(sk),\n    pk: Buffer.from(pk)\n  };\n}\n\nexport { getED25519Key };\n//# sourceMappingURL=openloginEd25519.esm.js.map\n"],"sourceRoot":""}