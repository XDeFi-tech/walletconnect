{"version":3,"file":"static/js/501.eb8a57bd.chunk.js","mappings":"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","sources":["../../src/index.ts","../node_modules/@web3auth/base-evm-adapter/src/baseEvmAdapter.ts","../node_modules/@web3auth/metamask-adapter/src/metamaskAdapter.ts"],"sourcesContent":[null,"import {\n  ADAPTER_STATUS,\n  BaseAdapter,\n  checkIfTokenIsExpired,\n  clearToken,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\nexport abstract class BaseEvmAdapter<T> extends BaseAdapter<T> {\n  public clientId: string;\n\n  constructor(params: { clientId?: string } = {}) {\n    super();\n    this.clientId = params.clientId;\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || !this.chainConfig?.chainId) throw WalletLoginError.notConnectedError();\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n\n      const signedMessage = await this.provider.request<string>({\n        method: \"personal_sign\",\n        params: [challenge, accounts[0]],\n      });\n\n      const idToken = await verifySignedChallenge(chainNamespace, signedMessage as string, challenge, this.name, this.sessionTime, this.clientId);\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n}\n","import detectEthereumProvider from \"@metamask/detect-provider\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\n\ninterface EthereumProvider extends SafeEventEmitterProvider {\n  isMetaMask?: boolean;\n  isConnected: () => boolean;\n  chainId: string;\n}\nexport interface MetamaskAdapterOptions {\n  chainConfig?: CustomChainConfig;\n  sessionTime?: number;\n  clientId?: string;\n}\n\nclass MetamaskAdapter extends BaseEvmAdapter<void> {\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly name: string = WALLET_ADAPTERS.METAMASK;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  private rehydrated = false;\n\n  private metamaskProvider: EthereumProvider | null = null;\n\n  constructor(adapterOptions: MetamaskAdapterOptions) {\n    super(adapterOptions);\n    this.chainConfig = adapterOptions?.chainConfig || null;\n    this.sessionTime = adapterOptions?.sessionTime || 86400;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = (await detectEthereumProvider({ mustBeMetaMask: true })) as EthereumProvider;\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      log.debug(\"initializing metamask adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(options: { sessionTime?: number; clientId?: string }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n    if (options?.clientId) {\n      this.clientId = options.clientId;\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    // set default to mainnet\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.METAMASK });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n    try {\n      await this.metamaskProvider.request({ method: \"eth_requestAccounts\" });\n      const { chainId } = this.metamaskProvider;\n      if (chainId !== (this.chainConfig as CustomChainConfig).chainId) {\n        await this.switchChain(this.chainConfig as CustomChainConfig);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.METAMASK, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnect();\n    this.provider?.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async switchChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: chainConfig.chainId }],\n      });\n    } catch (switchError: unknown) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if ((switchError as { code: number }).code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{ chainId: chainConfig.chainId, chainName: chainConfig.displayName, rpcUrls: [chainConfig.rpcTarget] }],\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n}\n\nexport { MetamaskAdapter };\n"],"names":["module","mustBeMetaMask","silent","timeout","_validateInputs","handled","Promise","resolve","handleEthereum","window","removeEventListener","ethereum","isMetaMask","message","console","error","addEventListener","once","setTimeout","Error","BaseEvmAdapter","_inherits","params","_classCallCheck","_this","_defineProperty","clientId","_createClass","key","value","_authenticateUser","this","provider","chainConfig","_this$chainConfig","chainId","_context","WalletLoginError","_this$chainConfig2","chainNamespace","status","ADAPTER_STATUS","request","method","accounts","length","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","signChallenge","challenge","signedMessage","verifySignedChallenge","sessionTime","saveToken","_disconnect","_context2","clearToken","BaseAdapter","MetamaskAdapter","adapterOptions","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","WALLET_ADAPTERS","metamaskProvider","set","_","options","_get","detectEthereumProvider","WalletInitializationError","emit","ADAPTER_EVENTS","log","autoConnect","rehydrated","connect","getChainConfig","adapter","switchChain","_this2","disconnect","reconnected","_args3","cleanup","_context3","removeAllListeners","_context4","_context5","code","chainName","displayName","rpcUrls","rpcTarget"],"sourceRoot":""}